* EmailParser

EmailParser is a tool that extracts the text portion of MIME messages.  It finds the text
portions of the raw MIME message, as well as most common attachment types.

* Building EmailParser

The first time you build EmailParser, you will need to run 'mk init' in this directory. Once
complete, you won't have to run that command again.  To build EmailParser, simply run 'mk ep'.
This will build EmailParser.jar.  If you make changes and need to rebuild, run 'mk clean ep'
from this directory.

Additional mk options:
|-------------+--------------------------------------------------------------------------------------|
| clean       | cleans tmp/models directories used during testing, and all build-related files       |
| init        | downloads dependencies and build-related files                                       |
| dist-clean  | cleans all downloaded dependencies and build-related files                           |
| setup       | download and stage all dependent binaries (not implemented)                          |
| quick       | builds a non-standalone jar [default]                                                |
| emailParser | builds a standalone jar                                                              |
| ep          | builds a standalone jar                                                              |
| release     | build stand-alone jar for delivery and documentation (not implemented)               |
| docs        | build API documentation (not implemented)                                            |
| test        | runs unit tests                                                                      |
|             |                                                                                      |
|-------------+--------------------------------------------------------------------------------------|

By default, mk detects the architecture of your build system.  If you
need change this you can explicitly specify an ARCH setting as
follows:

#+BEGIN_EXAMPLE
$ ARCH=XXX mk release
#+END_EXAMPLE

where XXX is one of: linux, linux64, macos.  Similarly, mk accepts the following user-defined settings:

|-------+-------------------------------------------------------------------------------------------------|
| ARCH  | Defaults to an autodetected architecture based on `uname -ms`.                                  |
|       | If you platform doesn't report this properly, set this manually                                 |
| JDK   | User-specified JDK for javac, java and jar (as needed), defaults to supplied JDK in scala-tools |
| SCALA | User-specified scala install used during compilation. Defaults to supplied scala in scala-tools |
| WIDTH | Terminal width for build process logging.  This defaults to `tput cols`                         |
|       | Significant environment variables                                                               |
|       |                                                                                                 |
|-------+-------------------------------------------------------------------------------------------------|

* EmailParser Usage

EmailParser can be invoked on the command line with a script file:

#+BEGIN_EXAMPLE
$ ./runEmailParser -h

Usage:
  EmailParser [options] (--no-attachments | --some-attachments | --more-attachments | --extra-attachments)
  EmailParser --help | -h

Options:
  -h --help                          Show this message.
  -c CHARSET --charset=CHARSET       The default charset to use if not specified in the MIME header [default: UTF-8]
  -e PATH --email-dir=PATH           Path to email directory [default: ./test/resources/email]
  -t PATH --text-dir=PATH            Path to text directory [default: ./output/text]
  -u PATH --unprocessed-dir=PATH     Path to unprocessed directory [default: ./output/unprocessed]
  -s SUFFIX --email-suffix=SUFFIX    Suffix of email file names [default: .eml]
  -U --unwrap                        Undo line wrap
  -S --split-parts                   Splits text parts into individual files under one directory for each email
  --no-attachments                   Process no attachments (technically this will only process .html attachments to get the signature)
  --some-attachments                 Process some attachments (.eml, .txt, .rtf, .html)
  --more-attachments                 Process more attachments (.eml, .txt, .rtf, .html, .pdf, .doc)
  --extra-attachments                Process extra attachments (.eml, .txt, .rtf, .html, .pdf, .doc, .xls, .ppt, octet-stream)
#+END_EXAMPLE
